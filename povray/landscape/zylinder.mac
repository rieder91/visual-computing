#include "Math.inc"

#macro DreiPunkteZylinder(h, P, w, rOffset)
//Berechnet aus 3 Punkten deren gemeinsamen Kreis und zeichnet ihn als einen Zylinder

//INPUT P       ... der zweite Punkt in 2D, der das Kreis definiert. Der erste Punkt ist immer (0,0).
//      h       ... dient zur Berechnung des dritten Punktes des Kreises: es die maximale Hoehe ueber der
//                  Gerade, die (0,0) mit P verbindet, die das Kreis erreicht.
//      w       ... Hoehe des gezeichneten Zylinders
//      rOffset ... Versatz des Zylinder Radius, soll zum berechneten Radius dazugezaehlt werden
//OUTPUT hat den Praefix result_DreiPunkteZylinder_
//       px, py ... Zentrum des Kreises
//       pr     ... Radius des Kreises


// Länge der Kreissehne
#declare s = sqrt(P.x*P.x + P.y*P.y);

//#declare P = <P.x / s, P.y / s, 0>;

// Winkel um den der Mittelpunkt verschoben werden muss
#declare alph = VAngleD(<1, 0, 0>, P);

// Radius
#declare r = (4*h*h + s*s) / 8*h;


#declare Center = <s/2, h-r, 0>;
#declare CenterN = <Center.x * cos(alph) - Center.y*sin(alph), Center.x*sin(alph) + Center.y*cos(alph), 0>;

/*
#declare M = <s/2, h, 0>;
#declare MN = <M.x * cos(alph) - M.y*sin(alph), M.x*sin(alph) + M.y*cos(alph), 0>;
*/

// Lösungen
#declare px = CenterN.x;
#declare py = CenterN.y;
#declare pr = r + rOffset;

// Zeichnen des Zylinders
zeichneZylinder(px, py, pr, w)


// TODO: Berechne die Ausgabewerte und setze sie in den darunterliegenden Deklarationen ein
#declare result_DreiPunkteZylinder_px = px;
#declare result_DreiPunkteZylinder_py = py;
#declare result_DreiPunkteZylinder_r = pr;

#end

#macro zeichneZylinder(px, py, r, w)
//Extrudiert einen Kreis entlang der z-Axis zu einem Zylinder
//INPUT:
//       px, py, r ... Mitte und Radius des Zylinders
//       w ... Tiefe des Zylinders
cone
{
    <px, py, -w/2>, r
    <px, py, w/2>, r
}
#end

