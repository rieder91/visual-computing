#include "Math.inc"

#macro DreiPunkteZylinder(h, P, w, rOffset)
//Berechnet aus 3 Punkten deren gemeinsamen Kreis und zeichnet ihn als einen Zylinder

//INPUT P       ... der zweite Punkt in 2D, der das Kreis definiert. Der erste Punkt ist immer (0,0).
//      h       ... dient zur Berechnung des dritten Punktes des Kreises: es die maximale Hoehe ueber der
//                  Gerade, die (0,0) mit P verbindet, die das Kreis erreicht.
//      w       ... Hoehe des gezeichneten Zylinders
//      rOffset ... Versatz des Zylinder Radius, soll zum berechneten Radius dazugezaehlt werden
//OUTPUT hat den Praefix result_DreiPunkteZylinder_
//       px, py ... Zentrum des Kreises
//       pr     ... Radius des Kreises


// Länge der Kreissehne
#declare s1 = P.x;

// Radius
#declare r = (4*h*h + s1*s1) / 8*h;

// Mittelpunkt
#declare Center = <s1, -r, 0>;

// Lösungen
#declare px = Center.x;
#declare py = Center.y;
#declare pr = r + rOffset;

// Zeichnen des Zylinders
zeichneZylinder(px, py, pr, w)

#declare result_DreiPunkteZylinder_px = px;
#declare result_DreiPunkteZylinder_py = py;
#declare result_DreiPunkteZylinder_r = pr;

#end

#macro zeichneZylinder(px, py, r, w)
//Extrudiert einen Kreis entlang der z-Axis zu einem Zylinder
//INPUT:
//       px, py, r ... Mitte und Radius des Zylinders
//       w ... Tiefe des Zylinders
cone
{
    <px, py, -w/2>, r
    <px, py, w/2>, r
}
#end

